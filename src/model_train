import os
import joblib
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error

# Load dataset
data_path = "C:\\Users\\0707s\\OneDrive\\Desktop\\Housing (1).csv"
df = pd.read_csv(data_path)

# Define categorical and numerical features
categorical_features = ['mainroad', 'guestroom', 'basement', 'hotwaterheating', 
                        'airconditioning', 'prefarea', 'furnishingstatus']
numerical_features = ['area', 'bedrooms', 'bathrooms', 'stories', 'parking']

# One-Hot Encoding for categorical features
ohe = OneHotEncoder(drop='first', sparse_output=False)
encoded_features = pd.DataFrame(ohe.fit_transform(df[categorical_features]))
encoded_features.columns = ohe.get_feature_names_out(categorical_features)

# Standard Scaling for numerical features
scaler = StandardScaler()
df[numerical_features] = scaler.fit_transform(df[numerical_features])

# Combine processed features
df_processed = pd.concat([df[numerical_features], encoded_features, df['price']], axis=1)

# Splitting data
X = df_processed.drop(columns=['price'])
y = df_processed['price']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Evaluate Model
y_pred = model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))

print(f"Model Trained: MAE = {mae}, RMSE = {rmse}")

# Save model and preprocessors
os.makedirs("models", exist_ok=True)
joblib.dump(model, "models/trained_model.pkl")
joblib.dump(ohe, "models/ohe.pkl")
joblib.dump(scaler, "models/scaler.pkl")

print("Model and preprocessing tools saved successfully!")